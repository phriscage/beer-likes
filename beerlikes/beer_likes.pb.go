// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beer_likes.proto

package beerlikes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RefTypes are pointers to the Beer object for the coresponding like.
// The Id of the RefType would be the respective Beer ID, Review ID, etc.
type RefType struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefType) Reset()         { *m = RefType{} }
func (m *RefType) String() string { return proto.CompactTextString(m) }
func (*RefType) ProtoMessage()    {}
func (*RefType) Descriptor() ([]byte, []int) {
	return fileDescriptor_beer_likes_d4995abb3dbe3b88, []int{0}
}
func (m *RefType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RefType.Unmarshal(m, b)
}
func (m *RefType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RefType.Marshal(b, m, deterministic)
}
func (dst *RefType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefType.Merge(dst, src)
}
func (m *RefType) XXX_Size() int {
	return xxx_messageInfo_RefType.Size(m)
}
func (m *RefType) XXX_DiscardUnknown() {
	xxx_messageInfo_RefType.DiscardUnknown(m)
}

var xxx_messageInfo_RefType proto.InternalMessageInfo

func (m *RefType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RefType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Like are represented as a positive or negative action for a given RefType.
type Like struct {
	RefType              *RefType `protobuf:"bytes,1,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Liked                bool     `protobuf:"varint,3,opt,name=liked,proto3" json:"liked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Like) Reset()         { *m = Like{} }
func (m *Like) String() string { return proto.CompactTextString(m) }
func (*Like) ProtoMessage()    {}
func (*Like) Descriptor() ([]byte, []int) {
	return fileDescriptor_beer_likes_d4995abb3dbe3b88, []int{1}
}
func (m *Like) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Like.Unmarshal(m, b)
}
func (m *Like) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Like.Marshal(b, m, deterministic)
}
func (dst *Like) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Like.Merge(dst, src)
}
func (m *Like) XXX_Size() int {
	return xxx_messageInfo_Like.Size(m)
}
func (m *Like) XXX_DiscardUnknown() {
	xxx_messageInfo_Like.DiscardUnknown(m)
}

var xxx_messageInfo_Like proto.InternalMessageInfo

func (m *Like) GetRefType() *RefType {
	if m != nil {
		return m.RefType
	}
	return nil
}

func (m *Like) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Like) GetLiked() bool {
	if m != nil {
		return m.Liked
	}
	return false
}

// LikeQuery on for a given RefType.
type LikeQuery struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeQuery) Reset()         { *m = LikeQuery{} }
func (m *LikeQuery) String() string { return proto.CompactTextString(m) }
func (*LikeQuery) ProtoMessage()    {}
func (*LikeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_beer_likes_d4995abb3dbe3b88, []int{2}
}
func (m *LikeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LikeQuery.Unmarshal(m, b)
}
func (m *LikeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LikeQuery.Marshal(b, m, deterministic)
}
func (dst *LikeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeQuery.Merge(dst, src)
}
func (m *LikeQuery) XXX_Size() int {
	return xxx_messageInfo_LikeQuery.Size(m)
}
func (m *LikeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_LikeQuery proto.InternalMessageInfo

func (m *LikeQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// LikesQuery on for a given RefType.
type LikesQuery struct {
	RefType              *RefType `protobuf:"bytes,1,opt,name=ref_type,json=refType,proto3" json:"ref_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikesQuery) Reset()         { *m = LikesQuery{} }
func (m *LikesQuery) String() string { return proto.CompactTextString(m) }
func (*LikesQuery) ProtoMessage()    {}
func (*LikesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_beer_likes_d4995abb3dbe3b88, []int{3}
}
func (m *LikesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LikesQuery.Unmarshal(m, b)
}
func (m *LikesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LikesQuery.Marshal(b, m, deterministic)
}
func (dst *LikesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikesQuery.Merge(dst, src)
}
func (m *LikesQuery) XXX_Size() int {
	return xxx_messageInfo_LikesQuery.Size(m)
}
func (m *LikesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_LikesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_LikesQuery proto.InternalMessageInfo

func (m *LikesQuery) GetRefType() *RefType {
	if m != nil {
		return m.RefType
	}
	return nil
}

// Collection of likes
// If a like could not be found, the total count is 0
type LikesSummary struct {
	Likes []*Like `protobuf:"bytes,1,rep,name=likes,proto3" json:"likes,omitempty"`
	Total int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// google.protobuf.Timestamp elapsed_time = 3;
	ElapsedTime          uint32   `protobuf:"varint,3,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikesSummary) Reset()         { *m = LikesSummary{} }
func (m *LikesSummary) String() string { return proto.CompactTextString(m) }
func (*LikesSummary) ProtoMessage()    {}
func (*LikesSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_beer_likes_d4995abb3dbe3b88, []int{4}
}
func (m *LikesSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LikesSummary.Unmarshal(m, b)
}
func (m *LikesSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LikesSummary.Marshal(b, m, deterministic)
}
func (dst *LikesSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikesSummary.Merge(dst, src)
}
func (m *LikesSummary) XXX_Size() int {
	return xxx_messageInfo_LikesSummary.Size(m)
}
func (m *LikesSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_LikesSummary.DiscardUnknown(m)
}

var xxx_messageInfo_LikesSummary proto.InternalMessageInfo

func (m *LikesSummary) GetLikes() []*Like {
	if m != nil {
		return m.Likes
	}
	return nil
}

func (m *LikesSummary) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *LikesSummary) GetElapsedTime() uint32 {
	if m != nil {
		return m.ElapsedTime
	}
	return 0
}

func init() {
	proto.RegisterType((*RefType)(nil), "beerlikes.RefType")
	proto.RegisterType((*Like)(nil), "beerlikes.Like")
	proto.RegisterType((*LikeQuery)(nil), "beerlikes.LikeQuery")
	proto.RegisterType((*LikesQuery)(nil), "beerlikes.LikesQuery")
	proto.RegisterType((*LikesSummary)(nil), "beerlikes.LikesSummary")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeerLikesClient is the client API for BeerLikes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeerLikesClient interface {
	// A simple RPC.
	//
	// Obtains the like at a given RefType.
	//
	// A like with an empty id is returned if there's no like at the given
	// reftype.
	GetLike(ctx context.Context, in *LikeQuery, opts ...grpc.CallOption) (*Like, error)
	// Stream all the Likes at a given RefType
	// position.
	ListLikes(ctx context.Context, in *LikesQuery, opts ...grpc.CallOption) (BeerLikes_ListLikesClient, error)
	// Batch fetch all the Likes and let the server do the calculations
	GetLikesSummary(ctx context.Context, in *LikesQuery, opts ...grpc.CallOption) (*LikesSummary, error)
}

type beerLikesClient struct {
	cc *grpc.ClientConn
}

func NewBeerLikesClient(cc *grpc.ClientConn) BeerLikesClient {
	return &beerLikesClient{cc}
}

func (c *beerLikesClient) GetLike(ctx context.Context, in *LikeQuery, opts ...grpc.CallOption) (*Like, error) {
	out := new(Like)
	err := c.cc.Invoke(ctx, "/beerlikes.BeerLikes/GetLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerLikesClient) ListLikes(ctx context.Context, in *LikesQuery, opts ...grpc.CallOption) (BeerLikes_ListLikesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeerLikes_serviceDesc.Streams[0], "/beerlikes.BeerLikes/ListLikes", opts...)
	if err != nil {
		return nil, err
	}
	x := &beerLikesListLikesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeerLikes_ListLikesClient interface {
	Recv() (*Like, error)
	grpc.ClientStream
}

type beerLikesListLikesClient struct {
	grpc.ClientStream
}

func (x *beerLikesListLikesClient) Recv() (*Like, error) {
	m := new(Like)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *beerLikesClient) GetLikesSummary(ctx context.Context, in *LikesQuery, opts ...grpc.CallOption) (*LikesSummary, error) {
	out := new(LikesSummary)
	err := c.cc.Invoke(ctx, "/beerlikes.BeerLikes/GetLikesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerLikesServer is the server API for BeerLikes service.
type BeerLikesServer interface {
	// A simple RPC.
	//
	// Obtains the like at a given RefType.
	//
	// A like with an empty id is returned if there's no like at the given
	// reftype.
	GetLike(context.Context, *LikeQuery) (*Like, error)
	// Stream all the Likes at a given RefType
	// position.
	ListLikes(*LikesQuery, BeerLikes_ListLikesServer) error
	// Batch fetch all the Likes and let the server do the calculations
	GetLikesSummary(context.Context, *LikesQuery) (*LikesSummary, error)
}

func RegisterBeerLikesServer(s *grpc.Server, srv BeerLikesServer) {
	s.RegisterService(&_BeerLikes_serviceDesc, srv)
}

func _BeerLikes_GetLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerLikesServer).GetLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerlikes.BeerLikes/GetLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerLikesServer).GetLike(ctx, req.(*LikeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerLikes_ListLikes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LikesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeerLikesServer).ListLikes(m, &beerLikesListLikesServer{stream})
}

type BeerLikes_ListLikesServer interface {
	Send(*Like) error
	grpc.ServerStream
}

type beerLikesListLikesServer struct {
	grpc.ServerStream
}

func (x *beerLikesListLikesServer) Send(m *Like) error {
	return x.ServerStream.SendMsg(m)
}

func _BeerLikes_GetLikesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerLikesServer).GetLikesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerlikes.BeerLikes/GetLikesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerLikesServer).GetLikesSummary(ctx, req.(*LikesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerLikes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beerlikes.BeerLikes",
	HandlerType: (*BeerLikesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLike",
			Handler:    _BeerLikes_GetLike_Handler,
		},
		{
			MethodName: "GetLikesSummary",
			Handler:    _BeerLikes_GetLikesSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListLikes",
			Handler:       _BeerLikes_ListLikes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beer_likes.proto",
}

func init() { proto.RegisterFile("beer_likes.proto", fileDescriptor_beer_likes_d4995abb3dbe3b88) }

var fileDescriptor_beer_likes_d4995abb3dbe3b88 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3b, 0x4f, 0x32, 0x41,
	0x14, 0x65, 0x78, 0x7c, 0xb0, 0x17, 0x3e, 0x30, 0x37, 0x18, 0x37, 0xd2, 0xe0, 0x26, 0x26, 0x34,
	0xa0, 0x59, 0x0b, 0x0b, 0x3b, 0x2c, 0x6c, 0x2c, 0x70, 0xa5, 0xb3, 0x20, 0x8b, 0x7b, 0xd1, 0x09,
	0x2c, 0x4c, 0x66, 0x86, 0x62, 0x7f, 0x9c, 0xff, 0xcd, 0xcc, 0x23, 0xab, 0xd9, 0x84, 0xc2, 0x6e,
	0xe6, 0xdc, 0xf3, 0xb8, 0x67, 0x32, 0x70, 0xb6, 0x26, 0x92, 0xab, 0x1d, 0xdf, 0x92, 0x9a, 0x09,
	0x79, 0xd0, 0x07, 0x0c, 0x0c, 0x62, 0x81, 0x68, 0x0a, 0xed, 0x84, 0x36, 0xcb, 0x42, 0x10, 0x22,
	0x34, 0xf7, 0x69, 0x4e, 0x21, 0x1b, 0xb3, 0x49, 0x90, 0xd8, 0x33, 0xf6, 0xa1, 0xce, 0xb3, 0xb0,
	0x6e, 0x91, 0x3a, 0xcf, 0xa2, 0x37, 0x68, 0x3e, 0xf3, 0x2d, 0xe1, 0x14, 0x3a, 0x92, 0x36, 0x2b,
	0x5d, 0x08, 0xc7, 0xef, 0xc6, 0x38, 0x2b, 0x4d, 0x67, 0xde, 0x31, 0x69, 0x4b, 0x6f, 0x5d, 0xb1,
	0xc1, 0x21, 0xb4, 0x0c, 0x33, 0x0b, 0x1b, 0x63, 0x36, 0xe9, 0x24, 0xee, 0x12, 0x8d, 0x20, 0x30,
	0xe6, 0x2f, 0x47, 0x92, 0x85, 0x97, 0xb0, 0x32, 0xf9, 0x01, 0xc0, 0x0c, 0x95, 0x9b, 0xfe, 0x2d,
	0x3f, 0xda, 0x43, 0xcf, 0x8a, 0x5f, 0x8f, 0x79, 0x9e, 0xca, 0x02, 0xaf, 0x5d, 0xbe, 0x0a, 0xd9,
	0xb8, 0x31, 0xe9, 0xc6, 0x83, 0x5f, 0x5a, 0xc3, 0x73, 0x0b, 0x29, 0xb3, 0xa6, 0x3e, 0xe8, 0x74,
	0x67, 0x37, 0x6f, 0x25, 0xee, 0x82, 0x57, 0xd0, 0xa3, 0x5d, 0x2a, 0x14, 0x65, 0x2b, 0xcd, 0x73,
	0xb2, 0x1d, 0xfe, 0x27, 0x5d, 0x8f, 0x2d, 0x79, 0x4e, 0xf1, 0x17, 0x83, 0x60, 0x4e, 0x24, 0x6d,
	0x28, 0xc6, 0xd0, 0x7e, 0x22, 0x6d, 0xdf, 0x6d, 0x58, 0x49, 0xb2, 0x6d, 0x2e, 0xab, 0xf9, 0x51,
	0x0d, 0xef, 0xcd, 0x5b, 0x28, 0xed, 0x0c, 0xce, 0x2b, 0x73, 0x75, 0x4a, 0x76, 0xcb, 0xf0, 0x11,
	0x06, 0x3e, 0xac, 0x6c, 0x7b, 0x42, 0x7e, 0x51, 0x85, 0x3d, 0x3f, 0xaa, 0xcd, 0x6f, 0x60, 0x24,
	0x3e, 0x25, 0x57, 0xef, 0xe9, 0x07, 0x59, 0x56, 0x2a, 0xc4, 0x0f, 0x7b, 0xde, 0x2f, 0xbb, 0x2d,
	0xcc, 0x7f, 0x5a, 0xb0, 0xf5, 0x3f, 0xfb, 0xb1, 0xee, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x51,
	0x97, 0x92, 0xbd, 0x6c, 0x02, 0x00, 0x00,
}
